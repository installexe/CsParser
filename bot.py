from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import asyncio
import os
import json
import time

from aiogram.utils.markdown import hbold, hlink
from main import collect_data
bot = Bot(token='5508832970:AAESzeWx-o43BFQesNtGmp6gH7b-GYwIbDo', parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['–ù–æ–∂–∏üëÖ', '–ü–µ—Ä—á–∞—Ç–∫–∏ üß§', 'AWP ü§°']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–π—Ç–µ–º–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ cs.money \n –ë–æ—Ç –≤—ã–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ —Å–∫–∏–Ω–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–∫–∏–¥–∫—É –±–æ–ª–µ–µ 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.message_handler(Text(equals='–ù–æ–∂–∏üëÖ'))
async def get_discount_knifes(message: types.Message):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Ç—Ä—è—Ö–∏–≤–∞–µ–º –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞')

    collect_data(types=2)

    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f"{hlink(item.get('full_name'), item.get('3d'))}\n' \
               f'{hbold('–°–∫–∏–¥–æ—á–∫–∞: ')}{item.get('overprice')}% ü¶æ\n' \
               f'{hbold('–¶–µ–Ω–∞: ')}${item.get('item_price')}üçî"

        if index%20 == 0:
            time.sleep(3)
        await message.answer(card)


@dp.message_handler(Text(equals='AWP ü§°'))
async def get_discount_knifes(message: types.Message):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Ç—Ä—è—Ö–∏–≤–∞–µ–º –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞')

    collect_data(types=4)

    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f"{hlink(item.get('full_name'), item.get('3d'))}\n' \
               f'{hbold('–°–∫–∏–¥–æ—á–∫–∞: ')}{item.get('overprice')}% ü¶æ\n' \
               f'{hbold('–¶–µ–Ω–∞: ')}${item.get('item_price')}üçî"

        if index%20 == 0:
            time.sleep(3)
        await message.answer(card)

@dp.message_handler(Text(equals='–ü–µ—Ä—á–∞—Ç–∫–∏ üß§'))
async def get_discount_knifes(message: types.Message):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Ç—Ä—è—Ö–∏–≤–∞–µ–º –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞')

    collect_data(types=13)

    with open('result.json', encoding='utf-8') as file:
        data = json.load(file)

    for index, item in enumerate(data):
        card = f"{hlink(item.get('full_name'), item.get('3d'))}\n' \
               f'{hbold('–°–∫–∏–¥–æ—á–∫–∞: ')}{item.get('overprice')}% ü¶æ\n' \
               f'{hbold('–¶–µ–Ω–∞: ')}${item.get('item_price')}üçî"

        if index%20 == 0:
            time.sleep(3)
        await message.answer(card)


def main():
    executor.start_polling(dp)

if __name__=='__main__':
    main()